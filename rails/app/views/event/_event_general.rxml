xml.div(:id=>'content-general') do

  xml.fieldset do
    xml.legend local('event::tab::general')

    xml.table do
      xml << text_field_row( @event, :title )
      xml << text_field_row( @event, :subtitle )
      xml << text_field_row( @event, :slug )
      xml << select_row( @event, :event_origin, Event_origin.select({},{:order=>:rank}).map{|e| e.event_origin} )
      xml << select_row( @event, :event_state, Event_state.select({},{:order=>:rank}).map{|e| [e.event_state,e.event_state]}, {:master=>:event_state_progress} )
      xml << select_row( @event, :event_state_progress, Event_state_progress.select({},{:order=>[:event_state,:rank]}).map{|e| [e.event_state_progress,e.event_state,e.event_state_progress]},{:slave=>true} )
      xml.script("$('event[event_state]').onchange()",{:type=>"text/javascript"})
      xml << select_row( @event, :conference_team, Conference_team.select({:conference_id=>@event.conference_id},{:order=>[:rank,:conference_team]}).map(&:conference_team), {:with_empty=>true} )
      #xml << select_row( @event, :paper, [[nil,'unknown'],[true,'yes'],[false,'no']] )
      xml << select_row( @event, :slides, [[nil,'unknown'],[true,'yes'],[false,'no']] )
      #xml << select_row( @event, :language, View_conference_language.select({:conference_id=>@event.conference_id,:translated=>@current_language},{:order=>:name}).map{|e| [e.language,e.name]}, {:with_empty=>true} )
      tracks = @conference.tracks.map{|t| [t.conference_track_id,t.conference_track]}
      if not tracks.empty?
      xml << select_row( @event, :conference_track_id, tracks,{:with_empty=>true})
      end
      xml << select_row( @event, :event_type, Event_type_localized.select({:translated=>@current_language},{:order=>:name}).map{|e| [e.event_type,e.name]}, {:with_empty=>true} )
      xml << file_row( :event_image, :image )
      xml << check_box_row( :event_image, :remove )
      if @event.event_id && @event.current_transaction_id != 0
        oldest_transaction = Log::Event.select_single({:event_id=>@event.event_id},{:only=>[:log_transaction_id],:limit=>1,:order=>Momomoto::asc(:log_transaction_id)})
        created = Log::Log_transaction.select_single({:log_transaction_id=>oldest_transaction.log_transaction_id})
        xml.tr do
          xml.td do xml.label( local('event::creation_time') ) end
          xml.td created.log_timestamp.strftime('%Y-%m-%d %H:%M:%S')
        end if created
      end
   end

   xml.table do
      xml.p do
        xml.text "The first checkbox below confirms that the speaker expects to be able to travel to Brussels to speak in person on campus.  The second checkbox indicates that the speaker would like the proposal to be considered as a pre-recorded online-only talk if it is not selected for the in-person schedule or the first checkbox was unchecked."
      end
      xml.table do
        xml << check_box_row( @event, :physical )
        xml << check_box_row( @event, :virtual )
      end
      xml.p do
        xml.text "The room a talk is placed in on the schedule, not these fields, is what determines whether a talk is actually to be given in-person or online-only.  In-person talks are scheduled in physical rooms, beginning with A, H, J, K or U.  Virtual talks are scheduled in rooms beginning with D, M or S."
      end

    end
  end

  custom = Custom_event.select_or_new({:event_id=>@event.event_id.to_i})
  custom_fields = Custom_fields.select(:table_name=>:event)
  xml.fieldset do
    xml.legend local('custom_fields')
    xml.table do
      xml << custom_field_rows( custom_fields, custom )
    end
  end unless custom_fields.empty?

end
