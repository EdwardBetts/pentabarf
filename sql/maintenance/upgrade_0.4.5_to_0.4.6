BEGIN;

CREATE TABLE base.conference_track_account (
  conference_track_account_id SERIAL NOT NULL,
  conference_id INTEGER NOT NULL,
  conference_track_id INTEGER NOT NULL,
  account_id INTEGER NOT NULL
);

CREATE TABLE conference_track_account (
  FOREIGN KEY (conference_id) REFERENCES conference (conference_id) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (conference_track_id) REFERENCES conference_track (conference_track_id) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (account_id) REFERENCES auth.account (account_id) ON UPDATE CASCADE ON DELETE CASCADE,
  UNIQUE (conference_id, conference_track_id, account_id),
  PRIMARY KEY (conference_track_account_id)
) INHERITS (base.conference_track_account);

CREATE TABLE log.conference_track_account (
) INHERITS (base.logging, base.conference_track_account );

CREATE INDEX log_conference_track_account_conference_track_account_id_idx ON log.conference_track_account( conference_track_account_id );
CREATE INDEX log_conference_track_account_log_transaction_id_idx ON log.conference_track_account( log_transaction_id );


-- Feature was introduced from conference_id 13 onwards - hard-coded.

CREATE OR REPLACE FUNCTION track_manager_trigger() RETURNS TRIGGER AS $$
  BEGIN
    INSERT INTO auth.account_conference_role
      SELECT distinct a.account_id, a.conference_id, 'devroom'
      FROM conference_track_account a
        LEFT JOIN auth.account_conference_role r
          ON (r.conference_id = a.conference_id AND r.account_id = a.account_id)
        WHERE r.account_id IS NULL;

    DELETE FROM auth.account_conference_role s
      WHERE (s.account_id, s.conference_id, s.conference_role) IN
        (SELECT r.account_id, r.conference_id, r.conference_role
         FROM auth.account_conference_role r 
           LEFT JOIN conference_track_account a  
           ON (a.conference_id = r.conference_id 
               AND a.account_id = r.account_id
               AND r.conference_role = 'devroom')
           WHERE r.conference_id > 12
	       AND r.conference_role = 'devroom' 
               AND a.account_id IS NULL)
        AND s.conference_id > 12;
    RETURN NULL;
  END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER track_manager_trigger AFTER INSERT OR UPDATE OR DELETE ON conference_track_account FOR EACH STATEMENT EXECUTE PROCEDURE track_manager_trigger();

ALTER TABLE base.conference_track ADD COLUMN conference_track_mail_alias TEXT;
ALTER TABLE base.conference_track ADD COLUMN conference_call_for_papers_url TEXT;
ALTER TABLE base.conference ADD COLUMN f_travel_enabled BOOL NOT NULL DEFAULT TRUE;
ALTER TABLE base.event ADD COLUMN licence TEXT;
ALTER TABLE base.person ADD COLUMN contact_instructions TEXT;

ALTER TABLE base.event ADD COLUMN presentation_length INTERVAL NOT NULL DEFAULT '0:00:00';
ALTER TABLE base.event ADD COLUMN sreview_upload_url TEXT;
ALTER TABLE base.event ADD COLUMN prerecorded BOOL NOT NULL DEFAULT TRUE;
ALTER TABLE base.event ADD COLUMN sreview_review_url TEXT;

SELECT log.activate_logging();

CREATE OR REPLACE VIEW view_report_devroom_managers AS
  SELECT t.conference_id, 
    conference_track, 
    concat(conference_track_mail_alias, '-devroom-manager@fosdem.org') AS mail_alias, 
    array_to_string(array_agg(a.email), ', ') AS alias_expansion,
    array_to_string(array_agg(concat(p.first_name, ' ', p.last_name, ' <', a.email,'>')), ', ') AS devroom_managers_contacts,
    array_to_string(array_agg(p.email), ', ') AS person_emails,
    array_to_string(array_agg(login_name), ', ') AS login_names
  FROM conference_track_account
  JOIN conference_track t USING (conference_track_id) 
  JOIN auth.account a USING (account_id) 
  JOIN person p USING (person_id)
  GROUP BY conference_track, conference_track_mail_alias, t.conference_id 
  ORDER BY conference_track;

INSERT INTO ui_message (ui_message) VALUES ('conference::f_travel_enabled');
INSERT INTO ui_message_localized (ui_message, translated, name) VALUES ('conference::f_travel_enabled', 'en', 'Enable Travel Information');

INSERT INTO ui_message (ui_message) VALUES ('conference_track::conference_track_mail_alias');
INSERT INTO ui_message_localized (ui_message, translated, name) VALUES ('conference_track::conference_track_mail_alias', 'en', 'Mail alias (@fosdem.org)');

INSERT INTO ui_message (ui_message) VALUES ('conference_track::conference_call_for_papers_url');
INSERT INTO ui_message_localized (ui_message, translated, name) VALUES ('conference_track::conference_call_for_papers_url', 'en', 'Call For Papers URL');

INSERT INTO ui_message (ui_message) VALUES ('event::licence');
INSERT INTO ui_message_localized (ui_message, translated, name) VALUES ('event::licence', 'en', 'Software Licences');
INSERT INTO ui_message (ui_message) VALUES ('person::contact_instructions');
INSERT INTO ui_message_localized (ui_message, translated, name) VALUES ('person::contact_instructions', 'en', 'Contact Instructions');

CREATE OR REPLACE VIEW view_person AS
  SELECT person_id,
         coalesce(person.public_name, coalesce(person.first_name || ' ', '') || person.last_name, person.nickname, person.first_name) AS name,
         title,
         gender,
         first_name,
         last_name,
         public_name,
         nickname,
         address,
         street,
         street_postcode,
         po_box,
         po_box_postcode,
         city,
         country,
         email,
         spam,
         iban,
         bic,
         bank_name,
         account_owner
    FROM person;

CREATE OR REPLACE VIEW view_schedule_person AS
  SELECT
    person.person_id,
    coalesce(person.public_name, coalesce(person.first_name || ' ', '') || person.last_name, person.nickname, person.first_name) AS name,
    conference_person.email,
    conference.conference_id,
    conference_person.conference_person_id,
    conference_person.abstract,
    conference_person.description
  FROM
    person
    CROSS JOIN conference
    LEFT OUTER JOIN conference_person USING(conference_id,person_id)
  WHERE
    EXISTS (
      SELECT 1
      FROM
        event_person
        INNER JOIN event_role ON (
          event_role.event_role = event_person.event_role AND
          event_role.public = true )
        INNER JOIN event ON (
          event.event_id = event_person.event_id AND
          event.public = TRUE AND
          event.event_state = 'accepted' AND
          event.event_state_progress = 'reconfirmed' )
        INNER JOIN view_schedule_day USING(conference_day_id)
        INNER JOIN view_schedule_room USING(conference_room_id)
      WHERE
        event_person.person_id = person.person_id AND
        event.conference_id = conference.conference_id AND
        event_person.event_role_state = 'confirmed'
    )
  ORDER BY coalesce(person.public_name, coalesce(person.first_name || ' ', '') || person.last_name, person.nickname, person.first_name)
;

INSERT INTO event_role (event_role, rank, participant, public) VALUES ('host', 3, true, false);
UPDATE event_role SET rank = 4 where event_role = 'coordinator';
UPDATE event_role SET rank = 5 where event_role = 'visitor';

INSERT INTO event_role_state (event_role_state, event_role, rank) VALUES ('canceled', 'host', 3);
INSERT INTO event_role_state (event_role_state, event_role, rank) VALUES ('confirmed', 'host', 5);
INSERT INTO event_role_state (event_role_state, event_role, rank) VALUES ('declined', 'host', 4);
INSERT INTO event_role_state (event_role_state, event_role, rank) VALUES ('enquired', 'host', 2);
INSERT INTO event_role_state (event_role_state, event_role, rank) VALUES ('idea', 'host', 1);
INSERT INTO event_role_state (event_role_state, event_role, rank) VALUES ('offer', 'host', 7);
INSERT INTO event_role_state (event_role_state, event_role, rank) VALUES ('unclear', 'host', 6);

INSERT INTO event_role_state_localized (event_role, event_role_state, translated, name) VALUES ('host', 'canceled', 'en', 'canceled');
INSERT INTO event_role_state_localized (event_role, event_role_state, translated, name) VALUES ('host', 'confirmed', 'en', 'confirmed');
INSERT INTO event_role_state_localized (event_role, event_role_state, translated, name) VALUES ('host', 'declined', 'en', 'declined');
INSERT INTO event_role_state_localized (event_role, event_role_state, translated, name) VALUES ('host', 'enquired', 'en', 'enquired');
INSERT INTO event_role_state_localized (event_role, event_role_state, translated, name) VALUES ('host', 'idea', 'en', 'idea');
INSERT INTO event_role_state_localized (event_role, event_role_state, translated, name) VALUES ('host', 'offer', 'en', 'offer');
INSERT INTO event_role_state_localized (event_role, event_role_state, translated, name) VALUES ('host', 'unclear', 'en', 'unclear');

INSERT INTO event_role_localized (event_role, translated, name) VALUES ('host', 'en', 'Speaker Host');

CREATE OR REPLACE FUNCTION own_events( person_id INTEGER) RETURNS SETOF INTEGER AS $$
  SELECT event_id
    FROM event
   WHERE EXISTS (SELECT 1
                   FROM event_person
                  WHERE
                    event_person.person_id = $1 AND
                    event_person.event_id = event.event_id AND
                    event_person.event_role IN ('speaker','moderator','coordinator','submitter','host'));
$$ LANGUAGE SQL RETURNS NULL ON NULL INPUT;

CREATE OR REPLACE FUNCTION own_conference_events( person_id INTEGER, conference_id INTEGER) RETURNS SETOF INTEGER AS $$
  SELECT event_id
    FROM event
   WHERE conference_id = $2 AND
         EXISTS (SELECT 1
                   FROM event_person
                  WHERE
                    event_person.person_id = $1 AND
                    event_person.event_id = event.event_id AND
                    event_person.event_role IN ('speaker','moderator','coordinator','submitter','host'));
$$ LANGUAGE SQL RETURNS NULL ON NULL INPUT;

CREATE OR REPLACE FUNCTION conflict.conflict_event_person_event_after_departure(integer) RETURNS SETOF conflict.conflict_event_person AS $$
  DECLARE
    cur_conference_id ALIAS FOR $1;
    cur_conflict conflict.conflict_event_person%rowtype;
  BEGIN

    FOR cur_conflict IN
      SELECT event_person.event_id, event_person.person_id
        FROM event_person
        INNER JOIN event ON (
          event.event_id = event_person.event_id AND
          event.start_time IS NOT NULL
        )
        INNER JOIN conference_person USING (person_id, conference_id)
        INNER JOIN conference_day USING (conference_day_id)
        INNER JOIN conference_person_travel USING (conference_person_id)
        INNER JOIN conference ON (
            event.conference_id = conference.conference_id AND
            conference.conference_id = cur_conference_id
        )
      WHERE
        event_person.event_role IN ('speaker','moderator','host') AND
        event_person.event_role_state = 'confirmed' AND
        event.event_state = 'accepted' AND (
        (
          conference_person_travel.departure_date IS NOT NULL AND
          conference_person_travel.departure_time IS NULL AND
          conference_person_travel.departure_date < conference_day.conference_day
        ) OR (
          conference_person_travel.departure_date IS NOT NULL AND
          conference_person_travel.departure_time IS NOT NULL AND
          (conference_person_travel.departure_date + conference_person_travel.departure_time)::timestamp < (conference_day.conference_day + event.start_time + conference.day_change + event.duration)::timestamp
        ) )
    LOOP
      RETURN NEXT cur_conflict;
    END LOOP;
    RETURN;
  END;
$$ LANGUAGE 'plpgsql' RETURNS NULL ON NULL INPUT;


CREATE OR REPLACE FUNCTION conflict.conflict_event_person_event_before_arrival(integer) RETURNS SETOF conflict.conflict_event_person AS $$
  DECLARE
    cur_conference_id ALIAS FOR $1;
    cur_conflict conflict.conflict_event_person%rowtype;
  BEGIN

    FOR cur_conflict IN
      SELECT event_person.event_id, event_person.person_id
        FROM event_person
        INNER JOIN event ON (
          event.event_id = event_person.event_id AND
          event.start_time IS NOT NULL
        )
        INNER JOIN conference_person USING (person_id, conference_id)
        INNER JOIN conference_day USING (conference_day_id)
        INNER JOIN conference_person_travel USING (conference_person_id)
        INNER JOIN conference ON (
            event.conference_id = conference.conference_id AND
            conference.conference_id = cur_conference_id
        )
      WHERE
        event_person.event_role IN ('speaker','moderator','host') AND
        event_person.event_role_state = 'confirmed' AND
        event.event_state = 'accepted' AND 
        ( (
            conference_person_travel.arrival_date IS NOT NULL AND
            conference_person_travel.arrival_time IS NULL AND
            conference_person_travel.arrival_date > conference_day.conference_day
          ) OR (
            conference_person_travel.arrival_date IS NOT NULL AND
            conference_person_travel.arrival_time IS NOT NULL AND
            (conference_person_travel.arrival_date + conference_person_travel.arrival_time)::timestamp > (conference_day.conference_day + event.start_time + conference.day_change)::timestamp
        ) )
    LOOP
      RETURN NEXT cur_conflict;
    END LOOP;
    RETURN;
  END;
$$ LANGUAGE 'plpgsql' RETURNS NULL ON NULL INPUT;

CREATE OR REPLACE FUNCTION conflict.conflict_event_person_event_time_speaker_speaker(integer) RETURNS SETOF conflict.conflict_event_person_event AS $$
  SELECT
    ep1.person_id AS person_id,
    ep1.event_id AS event_id1,
    ep2.event_id AS event_id2
  FROM
    event_person AS ep1
    INNER JOIN event AS e1 ON (
      e1.conference_id = $1 AND
      e1.event_id = ep1.event_id AND
      e1.start_time IS NOT NULL AND
      e1.event_state = 'accepted' AND
      e1.event_state_progress <> 'canceled'
    )
    INNER JOIN conference_day AS cd1 USING (conference_day_id)
    INNER JOIN event_person AS ep2 ON (
      ep2.person_id = ep1.person_id AND
      ep2.event_role IN ('speaker','moderator','host') AND
      ep2.event_role_state = 'confirmed' AND
      ep2.event_id <> ep1.event_id
    )
    INNER JOIN event AS e2 ON (
      e2.conference_id = $1 AND
      e2.event_id = ep2.event_id AND
      e2.start_time IS NOT NULL AND
      e2.event_state = 'accepted' AND
      e2.event_state_progress <> 'canceled'
    )
    INNER JOIN conference_day AS cd2 ON (
      cd2.conference_day_id = e2.conference_day_id
    )
  WHERE
    ep1.event_role IN ('speaker','moderator','host') AND
    ep1.event_role_state = 'confirmed' AND
    (cd1.conference_day + e1.start_time, e1.duration) OVERLAPS (cd2.conference_day + e2.start_time, e2.duration) AND
    -- OVERLAPS also returns true when the end of interval 1 matches the start of interval 2
    -- thats why we exclude those cases explicitly
    cd1.conference_day + e1.start_time + e1.duration <> cd2.conference_day + e2.start_time AND
    cd2.conference_day + e2.start_time + e2.duration <> cd1.conference_day + e1.start_time;

$$ LANGUAGE SQL RETURNS NULL ON NULL INPUT;

CREATE OR REPLACE FUNCTION conflict.conflict_event_person_event_time_speaker_visitor(integer) RETURNS SETOF conflict.conflict_event_person_event AS $$
  SELECT
    ep1.person_id AS person_id,
    ep1.event_id AS event_id1,
    ep2.event_id AS event_id2
  FROM
    event_person AS ep1
    INNER JOIN event AS e1 ON (
      e1.conference_id = $1 AND
      e1.event_id = ep1.event_id AND
      e1.start_time IS NOT NULL AND
      e1.event_state = 'accepted' AND
      e1.event_state_progress <> 'canceled'
    )
    INNER JOIN conference_day AS cd1 USING (conference_day_id)
    INNER JOIN event_person AS ep2 ON (
      ep2.person_id = ep1.person_id AND
      ep2.event_role = 'visitor' AND
      ep2.event_id <> ep1.event_id
    )
    INNER JOIN event AS e2 ON (
      e2.conference_id = $1 AND
      e2.event_id = ep2.event_id AND
      e2.start_time IS NOT NULL AND
      e2.event_state = 'accepted' AND
      e2.event_state_progress <> 'canceled'
    )
    INNER JOIN conference_day AS cd2 ON (
      cd2.conference_day_id = e2.conference_day_id
    )
  WHERE
    ep1.event_role IN ('speaker','moderator','host') AND
    ep1.event_role_state = 'confirmed' AND
    (cd1.conference_day + e1.start_time, e1.duration) OVERLAPS (cd2.conference_day + e2.start_time, e2.duration) AND
    -- OVERLAPS also returns true when the end of interval 1 matches the start of interval 2
    -- thats why we exclude those cases explicitly
    cd1.conference_day + e1.start_time + e1.duration <> cd2.conference_day + e2.start_time AND
    cd2.conference_day + e2.start_time + e2.duration <> cd1.conference_day + e1.start_time;
    
$$ LANGUAGE SQL RETURNS NULL ON NULL INPUT;

CREATE OR REPLACE FUNCTION related_event_speaker(integer) RETURNS SETOF INTEGER AS '
  DECLARE 
    cur_event_id ALIAS FOR $1;
    cur_event RECORD;       
  BEGIN                     
        
    FOR cur_event IN
      SELECT event_id FROM event
        WHERE event.conference_id = (SELECT conference_id 
                                       FROM event 
                                      WHERE event_id = cur_event_id) AND
              event.event_id <> cur_event_id AND
              event.event_id IN ( SELECT event_id 
                                    FROM event_person
                                   WHERE event_role IN (''speaker'',''moderator'',''host'') AND
                                         person_id IN ( SELECT person_id 
                                                          FROM event_person 
                                                         WHERE event_role IN (''speaker'', ''moderator'', ''host'') AND 
                                                               event_id = cur_event_id ) )
    LOOP
      RETURN NEXT cur_event;
    END LOOP;
    
    RETURN;
  END;
' LANGUAGE 'plpgsql' RETURNS NULL ON NULL INPUT;

CREATE OR REPLACE VIEW view_mail_accepted_speaker AS
  SELECT view_person.person_id,
         view_person.name,
         view_person.email,
         view_person.spam,
         event.event_id,
         event.title AS event_title,
         event.subtitle AS event_subtitle,
         conference.conference_id,
         conference.acronym AS conference_acronym,
         conference.title AS conference_title
    FROM event_person
         INNER JOIN view_person ON (
             view_person.person_id = event_person.person_id AND
             view_person.email IS NOT NULL )
         INNER JOIN event ON (
             event.event_id = event_person.event_id )
         INNER JOIN conference ON (
             conference.conference_id = event.conference_id )
    WHERE
        event.event_state = 'accepted' AND
        event.event_state_progress <> 'canceled' AND
        event_person.event_role IN ('speaker', 'moderator', 'host') AND
        event_person.event_role_state = 'confirmed'
ORDER BY view_person.person_id, event.event_id
;

CREATE OR REPLACE VIEW view_mail_all_speaker AS
  SELECT DISTINCT ON ( person.person_id )
         person.person_id,
         view_person.name,
         view_person.email,
         view_person.spam
    FROM event_person
         INNER JOIN person ON (
             person.person_id = event_person.person_id AND
             person.email IS NOT NULL)
         INNER JOIN view_person ON (
             view_person.person_id = event_person.person_id )
   WHERE event_role IN ('speaker','moderator','host')
;            

CREATE OR REPLACE VIEW view_mail_missing_slides AS
  SELECT view_person.person_id,
         view_person.name,
         view_person.email,
         view_person.spam,
         event.event_id,
         event.title AS event_title,
         event.subtitle AS event_subtitle,
         conference.conference_id,
         conference.acronym AS conference_acronym,
         conference.title AS conference_title
    FROM event_person
         INNER JOIN view_person ON (
             view_person.person_id = event_person.person_id AND
             view_person.email IS NOT NULL )
         INNER JOIN event ON (
             event.event_id = event_person.event_id AND
             event.slides = 't' )
         INNER JOIN conference ON (
             conference.conference_id = event.conference_id )
  WHERE NOT EXISTS (SELECT 1
                      FROM event_attachment
                     WHERE event_attachment.event_id = event.event_id AND
                           event_attachment.attachment_type = 'slides' ) AND
        event.event_state = 'accepted' AND
        event.event_state_progress = 'confirmed' AND
        event_person.event_role IN ('speaker','moderator','host') AND
        event_person.event_role_state = 'confirmed'
ORDER BY view_person.person_id, event.event_id
;

CREATE OR REPLACE VIEW release.view_schedule_event_person AS
  SELECT
    event_person.event_person_id,
    event_person.conference_release_id,
    event_person.event_id,
    view_schedule_event.conference_id,
    view_schedule_event.title,
    view_schedule_event.subtitle,
    event_person.person_id,
    view_person.name,
    event_person.event_role,
    event_role_localized.name AS event_role_name,
    event_role_localized.translated,
    event_person.event_role_state
  FROM   
    release.event_person
    INNER JOIN event_role_localized USING (event_role)
    INNER JOIN release.view_schedule_event USING (conference_release_id,event_id,translated)
    INNER JOIN release.view_person USING (conference_release_id,person_id)
  WHERE      
    event_person.event_role IN ('speaker','moderator','host') AND
    event_person.event_role_state = 'confirmed'
  ORDER BY title, subtitle, name
;      

CREATE OR REPLACE VIEW release.view_schedule_person AS
  SELECT
    person.conference_release_id,
    person.person_id,
    coalesce(person.public_name, coalesce(person.first_name || ' ', '') || person.last_name, person.nickname) AS name,
    conference_person.email,
    conference.conference_id,
    conference_person.conference_person_id,
    conference_person.abstract,
    conference_person.description
  FROM
    release.person
    INNER JOIN release.conference USING(conference_release_id)
    LEFT OUTER JOIN release.conference_person USING(conference_release_id,person_id)
  WHERE  
    EXISTS (
      SELECT 1 
      FROM
        release.event_person
        INNER JOIN release.event USING(conference_release_id,event_id)
        INNER JOIN release.view_schedule_day USING(conference_release_id,conference_day_id)
        INNER JOIN release.view_schedule_room USING(conference_release_id,conference_room_id)
      WHERE
        event_person.conference_release_id = person.conference_release_id AND
        event_person.person_id = person.person_id AND
        event_person.event_role IN ('speaker','moderator','host') AND
        event_person.event_role_state = 'confirmed' AND
        event.public = TRUE AND
        event.event_state = 'accepted' AND
        event.event_state_progress = 'reconfirmed'
    )
  ORDER BY coalesce(person.public_name, coalesce(person.first_name || ' ', '') || person.last_name, person.nickname)
;

CREATE OR REPLACE VIEW view_report_arrived AS
  SELECT 
    view_person.person_id,
    view_person.name,
    conference_person.conference_id,
    conference_person.arrived
  FROM view_person
    INNER JOIN conference_person USING (person_id)
  WHERE 
    conference_person.arrived = TRUE AND
    EXISTS (SELECT 1
      FROM event_person
        INNER JOIN event ON (
          event_person.event_id = event.event_id AND
          event.event_state = 'accepted' AND
          event.event_state_progress = 'reconfirmed' AND
          event.conference_id = conference_person.conference_id)
      WHERE event_person.person_id = view_person.person_id AND
        event_person.event_role IN ('speaker','moderator','host') AND
        event_person.event_role_state = 'confirmed' )
   ORDER BY lower(name)
;     

CREATE OR REPLACE VIEW view_report_missing AS
  SELECT
    view_person.person_id,
    view_person.name,
    conference_person.conference_id,
    conference_person.arrived
  FROM view_person
    INNER JOIN conference_person USING (person_id)
  WHERE
    arrived = FALSE AND
    EXISTS (
      SELECT 1
      FROM event_person
        INNER JOIN event ON (
          event_person.event_id = event.event_id AND
          event.conference_id = conference_person.conference_id AND
          event.event_state = 'accepted' AND
          event.event_state_progress = 'reconfirmed' )
        INNER JOIN conference USING (conference_id)
        INNER JOIN conference_day USING (conference_day_id)
      WHERE event_person.person_id = view_person.person_id AND
        event_person.event_role IN ('speaker','moderator','host') AND
        event_person.event_role_state = 'confirmed' AND
        conference_day.conference_day + event.start_time + conference.day_change BETWEEN now() AND now() + '3 hour'::INTERVAL
     )
   ORDER BY lower(name)
;

CREATE OR REPLACE VIEW view_report_not_arrived AS
  SELECT
    view_person.person_id,
    view_person.name,
    conference_person.conference_id,
    conference_person.arrived
  FROM view_person
    INNER JOIN conference_person USING (person_id)
  WHERE
    conference_person.arrived = FALSE AND
    EXISTS (SELECT 1
      FROM event_person
        INNER JOIN event ON (
          event_person.event_id = event.event_id AND
          event.event_state = 'accepted' AND
          event.event_state_progress = 'reconfirmed' AND
          event.conference_id = conference_person.conference_id)
      WHERE 
        event_person.person_id = view_person.person_id AND
        event_person.event_role IN ('speaker','moderator','host') AND
        event_person.event_role_state = 'confirmed' )
  ORDER BY lower(name)
;       
        
CREATE OR REPLACE VIEW view_own_events_participant AS
SELECT
  event.event_id,
  event.conference_id,
  (event.start_time + conference.day_change)::interval AS start_time,
  event.conference_day_id,
  conference_day.conference_day,
  conference_day.name AS conference_day_name,
  event.conference_room_id,
  conference_room.conference_room,
  event.event_state,
  event.event_state_progress,
  event_state_localized.translated,
  event_state_localized.name AS event_state_name,
  event_state_progress_localized.name AS event_state_progress_name,
  event.title,
  event.subtitle,
  event.duration,
  array_to_string(ARRAY(
    SELECT view_person.person_id
      FROM
        event_person
        INNER JOIN view_person USING (person_id)
      WHERE
        event_person.event_role IN ('speaker','moderator','host') AND
        event_person.event_role_state = 'confirmed' AND
        event_person.event_id = event.event_id
      ORDER BY view_person.name, event_person.person_id
    ), E'\n'::text) AS speaker_ids,
  array_to_string(ARRAY(
    SELECT view_person.name
      FROM
        event_person
        INNER JOIN view_person USING (person_id)
      WHERE
        event_person.event_role IN ('speaker','moderator','host') AND
        event_person.event_role_state = 'confirmed' AND
        event_person.event_id = event.event_id
      ORDER BY view_person.name, event_person.person_id
    ), E'\n'::text) AS speakers,
  event_role_localized.event_role,
  event_role_localized.name AS event_role_name,
  event_role_state_localized.event_role_state,
  event_role_state_localized.name AS event_role_state_name,
  event_person.person_id
FROM
  event
  INNER JOIN event_person USING (event_id)
  INNER JOIN conference USING (conference_id)
  INNER JOIN event_state_localized USING (event_state)
  INNER JOIN event_state_progress_localized USING (event_state,event_state_progress,translated)
  INNER JOIN event_role_localized USING (event_role,translated)
  INNER JOIN event_role_state_localized USING (event_role,event_role_state,translated)
  INNER JOIN event_role ON (
    event_role.event_role = event_person.event_role AND
    event_role.participant = TRUE )
  LEFT OUTER JOIN conference_day USING (conference_day_id)
  LEFT OUTER JOIN conference_room USING (conference_room_id)
;

CREATE OR REPLACE VIEW view_find_event AS
  SELECT
    event.event_id,
    event.conference_id,
    event.title,
    event.subtitle,
    event.slug,
    event.abstract,
    event.description,
    event.duration,
    event.event_origin,
    event.conference_track_id,
    event.event_state,
    event.event_state_progress,
    event.event_state || ' ' || event.event_state_progress AS event_state_and_progress,
    event.event_type,
    event.language,
    event.conference_room_id,
    conference_room.conference_room,
    event.conference_day_id,
    conference_day.conference_day,
    conference_day.name AS conference_day_name,
    (event.start_time + conference.day_change)::interval AS start_time,
    event.public,
    conference_track.conference_track,
    event_state_localized.translated,
    event_state_localized.name AS event_state_name,
    event_state_progress_localized.name AS event_state_progress_name,
    event_image.mime_type,
    mime_type.file_extension,
    array_to_string(ARRAY(
      SELECT view_person.person_id
        FROM
          event_person
          INNER JOIN view_person USING (person_id)
        WHERE
          event_person.event_role IN ('speaker','moderator') AND
          event_person.event_role_state = 'confirmed' AND
          event_person.event_id = event.event_id
        ORDER BY view_person.name, event_person.person_id
      ), E'\n'::text) AS speaker_ids,
    array_to_string(ARRAY(
      SELECT view_person.name
        FROM
          event_person
          INNER JOIN view_person USING (person_id)
        WHERE
          event_person.event_role IN ('speaker','moderator') AND
          event_person.event_role_state = 'confirmed' AND
          event_person.event_id = event.event_id
        ORDER BY view_person.name, event_person.person_id
      ), E'\n'::text) AS speakers,
    ARRAY( 
      SELECT person_id 
      FROM event_person
      WHERE 
        event.event_id = event_person.event_id AND 
        event_person.event_role = 'coordinator'
    ) AS coordinators,
    ARRAY( 
      SELECT person_id 
      FROM event_person
      WHERE 
        event.event_id = event_person.event_id AND 
        event_person.event_role = 'host'
    ) AS hosts
  FROM event
    INNER JOIN conference USING (conference_id)
    INNER JOIN event_state_localized USING (event_state)
    INNER JOIN event_state_progress_localized USING (translated,event_state,event_state_progress)
    LEFT OUTER JOIN conference_day USING (conference_day_id)
    LEFT OUTER JOIN conference_track USING (conference_track_id)
    LEFT OUTER JOIN conference_room USING (conference_room_id)
    LEFT OUTER JOIN event_image USING (event_id)
    LEFT OUTER JOIN mime_type USING (mime_type);

INSERT INTO ui_message (ui_message) VALUES ('event::event_role_name');
INSERT INTO ui_message_localized (ui_message, translated, name) VALUES ('event::event_role_name', 'en', 'Event Role');

INSERT INTO ui_message (ui_message) VALUES ('event::presentation_length');
INSERT INTO ui_message_localized (ui_message, translated, name) VALUES ('event::presentation_length', 'en', 'Presentation Length (without Q&A)');

CREATE OR REPLACE VIEW view_event AS
  SELECT event.event_id,
         event.conference_id,
         event.slug,
         event.title,
         event.subtitle,
         event.conference_track_id,
         conference_track.conference_track,
         event.conference_team,
         event.event_type,
         event.duration,
         event.event_state,
         event.event_state_progress,
         event.language,
         language_localized.name AS language_name,
         event.conference_room_id,
         conference_room.conference_room,
         event.conference_day_id,
         conference_day.conference_day,
         conference_day.name AS conference_day_name,
         event.start_time,
         event.abstract,
         event.description,
         event.resources,
         event.public,
         event.paper,
         event.slides,
         event.remark,
         event_state_localized.translated,
         event_state_localized.name AS event_state_name,
         event_type_localized.name AS event_type_name,
         conference.acronym,
         (conference_day.conference_day + event.start_time + conference.day_change)::timestamp AS start_datetime,
         event.start_time + conference.day_change AS real_starttime,
         event_image.mime_type,
         mime_type.file_extension,
	 event.licence,
	 event.presentation_length,
	 event.prerecorded
    FROM event
         INNER JOIN event_state_localized USING (event_state)
         INNER JOIN conference USING (conference_id)
         LEFT OUTER JOIN conference_day USING (conference_day_id)
         LEFT OUTER JOIN conference_track USING (conference_track_id)
         LEFT OUTER JOIN conference_room USING (conference_room_id)
         LEFT OUTER JOIN event_type_localized USING (event_type,translated)
         LEFT OUTER JOIN event_image USING (event_id)
         LEFT OUTER JOIN mime_type USING (mime_type)
         LEFT OUTER JOIN language_localized USING (language, translated)
;


ALTER TABLE event ADD CONSTRAINT presentation_shorter_than_duration CHECK (presentation_length <= duration AND presentation_length >= '00:00:00');

INSERT INTO im_type (im_type, scheme, rank) VALUES ('signal', 'signal', 7);
INSERT INTO im_type (im_type, scheme, rank) VALUES ('facebook', 'facebook', 8);
INSERT INTO im_type (im_type, scheme, rank) VALUES ('telegram', 'telegram', 9);
INSERT INTO im_type (im_type, scheme, rank) VALUES ('skype', 'skype', 10);
INSERT INTO im_type_localized (im_type, translated, name) VALUES ('signal', 'en', 'Signal');
INSERT INTO im_type_localized (im_type, translated, name) VALUES ('facebook', 'en', 'Facebook');
INSERT INTO im_type_localized (im_type, translated, name) VALUES ('telegram', 'en', '|Telegram');
INSERT INTO im_type_localized (im_type, translated, name) VALUES ('skype', 'en', 'Skype');

INSERT INTO ui_message (ui_message) VALUES ('event::sreview_review_url');
INSERT INTO ui_message (ui_message) VALUES ('event::sreview_upload_url');
INSERT INTO ui_message_localized (ui_message, translated, name) VALUES ('event::sreview_review_url', 'en', 'Video Review URL');
INSERT INTO ui_message_localized (ui_message, translated, name) VALUES ('event::sreview_upload_url', 'en', 'Pre-recorded Video Upload URL');

INSERT INTO ui_message (ui_message) VALUES ('event::prerecorded');
INSERT INTO ui_message_localized (ui_message, translated, name) VALUES ('event::prerecorded', 'en', 'Pre-recorded Video?');

COMMIT;
