BEGIN;

CREATE TABLE base.conference_track_account (
  conference_track_account_id SERIAL NOT NULL,
  conference_id INTEGER NOT NULL,
  conference_track_id INTEGER NOT NULL,
  account_id INTEGER NOT NULL
);

CREATE TABLE conference_track_account (
  FOREIGN KEY (conference_id) REFERENCES conference (conference_id) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (conference_track_id) REFERENCES conference_track (conference_track_id) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (account_id) REFERENCES auth.account (account_id) ON UPDATE CASCADE ON DELETE CASCADE,
  UNIQUE (conference_id, conference_track_id, account_id),
  PRIMARY KEY (conference_track_account_id)
) INHERITS (base.conference_track_account);

CREATE TABLE log.conference_track_account (
) INHERITS (base.logging, base.conference_track_account );

CREATE INDEX log_conference_track_account_conference_track_account_id_idx ON log.conference_track_account( conference_track_account_id );
CREATE INDEX log_conference_track_account_log_transaction_id_idx ON log.conference_track_account( log_transaction_id );


-- Feature was introduced from conference_id 13 onwards - hard-coded.

CREATE OR REPLACE FUNCTION track_manager_trigger() RETURNS TRIGGER AS $$
  BEGIN
    INSERT INTO auth.account_conference_role
      SELECT distinct a.account_id, a.conference_id, 'devroom'
      FROM conference_track_account a
        LEFT JOIN auth.account_conference_role r
          ON (r.conference_id = a.conference_id AND r.account_id = a.account_id)
        WHERE r.account_id IS NULL;

    DELETE FROM auth.account_conference_role s
      WHERE (s.account_id, s.conference_id, s.conference_role) IN
        (SELECT r.account_id, r.conference_id, r.conference_role
         FROM auth.account_conference_role r 
           LEFT JOIN conference_track_account a  
           ON (a.conference_id = r.conference_id 
               AND a.account_id = r.account_id
               AND r.conference_role = 'devroom')
           WHERE r.conference_id > 12
	       AND r.conference_role = 'devroom' 
               AND a.account_id IS NULL)
        AND s.conference_id > 12;
    RETURN NULL;
  END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER track_manager_trigger AFTER INSERT OR UPDATE OR DELETE ON conference_track_account FOR EACH STATEMENT EXECUTE PROCEDURE track_manager_trigger();

ALTER TABLE base.conference_track ADD COLUMN conference_track_mail_alias TEXT;

SELECT log.activate_logging();

CREATE OR REPLACE VIEW view_report_devroom_managers AS
  SELECT t.conference_id, 
    conference_track, 
    concat(conference_track_mail_alias, '@fosdem.org') AS mail_alias, 
    array_to_string(array_agg(a.email), ', ') AS alias_expansion,
    array_to_string(array_agg(concat(p.first_name, ' ', p.last_name, ' <', a.email,'>')), ', ') AS devroom_managers_contacts,
    array_to_string(array_agg(p.email), ', ') AS person_emails,
    array_to_string(array_agg(login_name), ', ') AS login_names
  FROM conference_track_account
  JOIN conference_track t USING (conference_track_id) 
  JOIN auth.account a USING (account_id) 
  JOIN person p USING (person_id)
  GROUP BY conference_track, conference_track_mail_alias, t.conference_id 
  ORDER BY conference_track;

COMMIT;
