BEGIN;

CREATE TABLE base.conference_track_account (
  conference_track_account_id SERIAL NOT NULL,
  conference_id INTEGER NOT NULL,
  conference_track_id INTEGER NOT NULL,
  account_id INTEGER NOT NULL
);

CREATE TABLE conference_track_account (
  FOREIGN KEY (conference_id) REFERENCES conference (conference_id) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (conference_track_id) REFERENCES conference_track (conference_track_id) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (account_id) REFERENCES auth.account (account_id) ON UPDATE CASCADE ON DELETE CASCADE,
  UNIQUE (conference_id, conference_track_id, account_id),
  PRIMARY KEY (conference_track_account_id)
) INHERITS (base.conference_track_account);

CREATE TABLE log.conference_track_account (
) INHERITS (base.logging, base.conference_track_account );

CREATE INDEX log_conference_track_account_conference_track_account_id_idx ON log.conference_track_account( conference_track_account_id );
CREATE INDEX log_conference_track_account_log_transaction_id_idx ON log.conference_track_account( log_transaction_id );


-- Feature was introduced from conference_id 13 onwards - hard-coded.

CREATE OR REPLACE FUNCTION track_manager_trigger() RETURNS TRIGGER AS $$
  BEGIN
    INSERT INTO auth.account_conference_role
      SELECT distinct a.account_id, a.conference_id, 'devroom'
      FROM conference_track_account a
        LEFT JOIN auth.account_conference_role r
          ON (r.conference_id = a.conference_id AND r.account_id = a.account_id)
        WHERE r.account_id IS NULL;

    DELETE FROM auth.account_conference_role s
      WHERE (s.account_id, s.conference_id, s.conference_role) IN
        (SELECT r.account_id, r.conference_id, r.conference_role
         FROM auth.account_conference_role r 
           LEFT JOIN conference_track_account a  
           ON (a.conference_id = r.conference_id 
               AND a.account_id = r.account_id
               AND r.conference_role = 'devroom')
           WHERE r.conference_id > 12
	       AND r.conference_role = 'devroom' 
               AND a.account_id IS NULL)
        AND s.conference_id > 12;
    RETURN NULL;
  END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER track_manager_trigger AFTER INSERT OR UPDATE OR DELETE ON conference_track_account FOR EACH STATEMENT EXECUTE PROCEDURE track_manager_trigger();

ALTER TABLE base.conference_track ADD COLUMN conference_track_mail_alias TEXT;
ALTER TABLE base.conference_track ADD COLUMN conference_call_for_papers_url TEXT;
ALTER TABLE base.conference ADD COLUMN f_travel_enabled BOOL NOT NULL DEFAULT TRUE;
ALTER TABLE base.event ADD COLUMN licence TEXT;
ALTER TABLE base.person ADD COLUMN contact_instructions TEXT;

SELECT log.activate_logging();

CREATE OR REPLACE VIEW view_report_devroom_managers AS
  SELECT t.conference_id, 
    conference_track, 
    concat(conference_track_mail_alias, '-devroom-manager@fosdem.org') AS mail_alias, 
    array_to_string(array_agg(a.email), ', ') AS alias_expansion,
    array_to_string(array_agg(concat(p.first_name, ' ', p.last_name, ' <', a.email,'>')), ', ') AS devroom_managers_contacts,
    array_to_string(array_agg(p.email), ', ') AS person_emails,
    array_to_string(array_agg(login_name), ', ') AS login_names
  FROM conference_track_account
  JOIN conference_track t USING (conference_track_id) 
  JOIN auth.account a USING (account_id) 
  JOIN person p USING (person_id)
  GROUP BY conference_track, conference_track_mail_alias, t.conference_id 
  ORDER BY conference_track;

INSERT INTO ui_message (ui_message) VALUES ('conference::f_travel_enabled');
INSERT INTO ui_message_localized (ui_message, translated, name) VALUES ('conference::f_travel_enabled', 'en', 'Enable Travel Information');

INSERT INTO ui_message (ui_message) VALUES ('conference_track::conference_track_mail_alias');
INSERT INTO ui_message_localized (ui_message, translated, name) VALUES ('conference_track::conference_track_mail_alias', 'en', 'Mail alias (@fosdem.org)');

INSERT INTO ui_message (ui_message) VALUES ('conference_track::conference_call_for_papers_url');
INSERT INTO ui_message_localized (ui_message, translated, name) VALUES ('conference_track::conference_call_for_papers_url', 'en', 'Call For Papers URL');


CREATE OR REPLACE VIEW view_event AS
  SELECT event.event_id,
         event.conference_id,
         event.slug,
         event.title,
         event.subtitle,
         event.conference_track_id,
         conference_track.conference_track,
         event.conference_team,
         event.event_type,
         event.duration,
         event.event_state,
         event.event_state_progress,
         event.language,
         language_localized.name AS language_name,
         event.conference_room_id,
         conference_room.conference_room,
         event.conference_day_id,
         conference_day.conference_day,
         conference_day.name AS conference_day_name,
         event.start_time,
         event.abstract,
         event.description,
         event.resources,
         event.public,
         event.paper,
         event.slides,
         event.remark,
         event_state_localized.translated,
         event_state_localized.name AS event_state_name,
         event_type_localized.name AS event_type_name,
         conference.acronym,
         (conference_day.conference_day + event.start_time + conference.day_change)::timestamp AS start_datetime,
         event.start_time + conference.day_change AS real_starttime,
         event_image.mime_type,
         mime_type.file_extension,
	 event.licence
    FROM event
         INNER JOIN event_state_localized USING (event_state)
         INNER JOIN conference USING (conference_id)
         LEFT OUTER JOIN conference_day USING (conference_day_id)
         LEFT OUTER JOIN conference_track USING (conference_track_id)
         LEFT OUTER JOIN conference_room USING (conference_room_id)
         LEFT OUTER JOIN event_type_localized USING (event_type,translated)
         LEFT OUTER JOIN event_image USING (event_id)
         LEFT OUTER JOIN mime_type USING (mime_type)
         LEFT OUTER JOIN language_localized USING (language, translated)
;

INSERT INTO ui_message (ui_message) VALUES ('event::licence');
INSERT INTO ui_message_localized (ui_message, translated, name) VALUES ('event::licence', 'en', 'Software Licences');
INSERT INTO ui_message (ui_message) VALUES ('person::contact_instructions');
INSERT INTO ui_message_localized (ui_message, translated, name) VALUES ('person::contact_instructions', 'en', 'Contact Instructions');

CREATE OR REPLACE VIEW view_person AS
  SELECT person_id,
         coalesce(person.public_name, coalesce(person.first_name || ' ', '') || person.last_name, person.nickname, person.first_name) AS name,
         title,
         gender,
         first_name,
         last_name,
         public_name,
         nickname,
         address,
         street,
         street_postcode,
         po_box,
         po_box_postcode,
         city,
         country,
         email,
         spam,
         iban,
         bic,
         bank_name,
         account_owner
    FROM person;

CREATE OR REPLACE VIEW view_schedule_person AS
  SELECT
    person.person_id,
    coalesce(person.public_name, coalesce(person.first_name || ' ', '') || person.last_name, person.nickname, person.first_name) AS name,
    conference_person.email,
    conference.conference_id,
    conference_person.conference_person_id,
    conference_person.abstract,
    conference_person.description
  FROM
    person
    CROSS JOIN conference
    LEFT OUTER JOIN conference_person USING(conference_id,person_id)
  WHERE
    EXISTS (
      SELECT 1
      FROM
        event_person
        INNER JOIN event_role ON (
          event_role.event_role = event_person.event_role AND
          event_role.public = true )
        INNER JOIN event ON (
          event.event_id = event_person.event_id AND
          event.public = TRUE AND
          event.event_state = 'accepted' AND
          event.event_state_progress = 'reconfirmed' )
        INNER JOIN view_schedule_day USING(conference_day_id)
        INNER JOIN view_schedule_room USING(conference_room_id)
      WHERE
        event_person.person_id = person.person_id AND
        event.conference_id = conference.conference_id AND
        event_person.event_role_state = 'confirmed'
    )
  ORDER BY coalesce(person.public_name, coalesce(person.first_name || ' ', '') || person.last_name, person.nickname, person.first_name)
;

COMMIT;
